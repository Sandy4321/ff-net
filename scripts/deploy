#!/usr/bin/env python3
from pathlib import Path
import os
this_filepath = Path(os.path.abspath(__file__))
this_dirpath = this_filepath.parent
import shutil
import subprocess
import argparse

def cleandir(d):
    if os.path.exists(d):
        shutil.rmtree(d)
    os.makedirs(d)

if __name__ == "__main__":
    arg_parser = argparse.ArgumentParser()
    arg_parser.add_argument("--repo", default="git@github.com:juniorrojas/ff-net.git") # TODO infer repo?
    arg_parser.add_argument("--branch", default="gh-pages")
    arg_parser.add_argument("--push", action="store_true")
    args = arg_parser.parse_args()

    repo = args.repo
    deploy_branch = args.branch
    remote = "origin"

    project_path = this_dirpath.parent
    deploy_path = project_path.joinpath("deploy.out")
    cleandir(deploy_path)

    os.chdir(deploy_path)
    e = subprocess.call(["git", "init"])
    if e != 0:
        exit(e)
    e = subprocess.call(["git", "remote", "add", remote, repo])
    if e != 0:
        exit(e)
    e = subprocess.call(["git", "pull", remote, deploy_branch])
    if e != 0:
        exit(e)
    e = subprocess.call(["git", "checkout", deploy_branch])
    if e != 0:
        exit(e)

    for filename in os.listdir(deploy_path):
        if filename == ".git":
            continue
        if os.path.isdir(filename):
            shutil.rmtree(filename)
        else:
            os.remove(filename)

    deploy_index_filename = str(deploy_path.joinpath("index.html"))

    shutil.copy(
        project_path.joinpath("index.html"),
        deploy_index_filename
    )
    shutil.copytree(
        project_path.joinpath("js.build.out"),
        deploy_path.joinpath("js.build.out")
    )
    shutil.copytree(
        project_path.joinpath("css"),
        deploy_path.joinpath("css")
    )

    print(f"Preview available at {deploy_index_filename}")

    if args.push:
        e = subprocess.call(["git", "add", "."])
        if e != 0:
            exit(e)
        e = subprocess.call(["git", "commit", "-m", "Deploy"])
        if e != 0:
            exit(e)
        e = subprocess.call(["git", "push", remote, deploy_branch])
        if e != 0:
            exit(e)
